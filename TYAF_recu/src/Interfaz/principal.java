/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Clases.*;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import javax.swing.ImageIcon;
import java.io.File;
import java.nio.file.Files;
import javax.swing.JOptionPane;

/**
 *
 * @author stark28
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Reconstruir Imagenes");
        jButton1.setName("btmanalizarcaptura"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setToolTipText("");
        jButton2.setLabel("analisis por textura");
        jButton2.setName("btm_animg"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("analisis por objeto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Introduzca el direcotrio o archivo a analizar");

        jLabel2.setText("Â¿Donde deben guardarse los resultados?");

        jButton4.setText("analisis profundo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jTextField2))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addComponent(jButton2)
                .addGap(29, 29, 29)
                .addComponent(jButton3)
                .addGap(33, 33, 33)
                .addComponent(jButton4)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jButton3.getAccessibleContext().setAccessibleName("btmanlisisXob");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                    try{
                //abrir archivo y leer imagen
                String FILENAME = "/home/stark28/planos/prueba_03_03.txt";
                BufferedReader br = null;
		FileReader fr = null;
                fr = new FileReader(FILENAME);
		br = new BufferedReader(fr);
                String sCurrentLine="";
                paquete mipaquete = new paquete();
                while ((sCurrentLine = br.readLine()) != null)
                {
                    try 
                    {
                        boolean result = recuperar(br, sCurrentLine, mipaquete);
                        if (result == true)
                        {
                            result = reconstruir(br, sCurrentLine, mipaquete);
                            if (result == true)
                            {
                                System.out.println("ok: " + mipaquete.id);
                                mipaquete.insertarenbd();
                                paquete mipack = new paquete();
                                System.out.println(sCurrentLine);
                            }
                            else
                            {
                                System.out.println("emergencia: " + mipaquete.id);
                                paquete mipack = new paquete();
                            }
                        }
                        else
                        {
                            sCurrentLine = br.readLine();
                        }
                    }
                    catch(Exception ex)
                    {
                        System.out.println(ex);
                        sCurrentLine = br.readLine();
                    }
                }

                    Image im = mipaquete.restore_image();
//                    Image myImg = im.getScaledInstance(label.getWidth(), label.getHeight(),Image.SCALE_SMOOTH);
//                    ImageIcon newImage = new ImageIcon(myImg);
//                    label.setIcon(newImage);
br.close();
fr.close();
            }catch(Exception ex){
                ex.printStackTrace();
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        nu_scanner scanner = new nu_scanner();
        
        //funciona 
        String origen=jTextField1.getText();
        String intermedio=jTextField1.getText();
        String destino=jTextField2.getText();
        File dir = new File(origen);
        String[] ficheros = dir.list();
        int x=0;
        while(ficheros != null)
        {
            scanner.convert_to_hsv(origen+ficheros[x], intermedio+"temp"+ficheros[x]);
            //probar con 0.19
            double y = scanner.skin_scan(intermedio+"temp"+ficheros[x]);
            if (y>0.15)
            {
                System.out.println("ALERTA!! " + origen+ficheros[x]);
                //copiar la evidencia a otra carpeta o destino
                java.nio.file.Path origenPath = java.nio.file.FileSystems.getDefault().getPath(origen+ficheros[x]);
                java.nio.file.Path destinoPath = java.nio.file.FileSystems.getDefault().getPath(destino+ficheros[x]);
                try
                {
                    Files.copy(origenPath, destinoPath,java.nio.file.StandardCopyOption.REPLACE_EXISTING);
                }
                catch (Exception e)
                {
                    System.out.println("ha ocurrido un error con "+origen+ficheros[x]);
                }
            }
            File temp = new File(intermedio+"temp"+ficheros[x]);
            temp.delete();
            x=x+1;
        }
        JOptionPane.showMessageDialog(rootPane, "Finalizacion exitosa", "El proceso ha finalizado con Ã©xito", HEIGHT);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        nu_scanner scanner = new nu_scanner();
        //funciona
        String origen=jTextField1.getText();
        String destino=jTextField2.getText();
        File dir = new File(origen);
        String[] ficheros = dir.list();
        int x=0;
        while(ficheros != null)
        {
            //scanner.convert_to_greyscale(origen+ficheros[x],destino+"temp"+ficheros[x]);
//            scanner.full_body_detection(destino+"temp"+ficheros[x]);
//            scanner.lower_body_detection(destino+"temp"+ficheros[x]);
//            scanner.upper_body_detection(destino+"temp"+ficheros[x]);
            //scanner.breasts_detection(origen+ficheros[x]);
            scanner.full_body_detection(origen+ficheros[x]);
            scanner.lower_body_detection(origen+ficheros[x]);
            scanner.upper_body_detection(origen+ficheros[x]);
            if (scanner.full != 0 || scanner.lower != 0 || scanner.upper != 0 || scanner.breasts != 0)
            {
                System.out.println("ALERTA!! " + origen+ficheros[x]);
                //copiar la evidencia a otra carpeta o destino
                java.nio.file.Path origenPath = java.nio.file.FileSystems.getDefault().getPath(origen+ficheros[x]);
                java.nio.file.Path destinoPath = java.nio.file.FileSystems.getDefault().getPath(destino+ficheros[x]);
                try
                {
                    Files.copy(origenPath, destinoPath,java.nio.file.StandardCopyOption.REPLACE_EXISTING);
                }
                catch (Exception e)
                {
                    System.out.println("ha ocurrido un error con "+origen+ficheros[x]);
                }
            }
            //File temp = new File(destino+"temp"+ficheros[x]);
            //temp.delete();
            x=x+1;
            scanner.reset_flags();
        }
        System.out.println("Completo!!!");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        nu_scanner scanner = new nu_scanner();
        //funciona 
        String origen=jTextField1.getText();
        String intermedio=jTextField1.getText();
        String destino=jTextField2.getText();
        File dir = new File(origen);
        String[] ficheros = dir.list();
        int x=0;
        while(ficheros != null)
        {
            scanner.convert_to_hsv(origen+ficheros[x], intermedio+"temp"+ficheros[x]);
            //probar con 0.19
            double y = scanner.skin_scan(intermedio+"temp"+ficheros[x]);
            if (y>0.15)
            {
                scanner.full_body_detection(origen+ficheros[x]);
                scanner.lower_body_detection(origen+ficheros[x]);
                scanner.upper_body_detection(origen+ficheros[x]);
                if (scanner.full != 0 || scanner.lower != 0 || scanner.upper != 0)
                {
                    System.out.println("ALERTA!! " + origen+ficheros[x]);
                    //copiar la evidencia a otra carpeta o destino
                    java.nio.file.Path origenPath = java.nio.file.FileSystems.getDefault().getPath(origen+ficheros[x]);
                    java.nio.file.Path destinoPath = java.nio.file.FileSystems.getDefault().getPath(destino+ficheros[x]);
                    try
                    {
                        Files.copy(origenPath, destinoPath,java.nio.file.StandardCopyOption.REPLACE_EXISTING);
                    }
                    catch (Exception e)
                    {
                        System.out.println("ha ocurrido un error con "+origen+ficheros[x]);
                    }
                }
            }
            File temp = new File(intermedio+"temp"+ficheros[x]);
            temp.delete();
            x=x+1;
        }        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private boolean recuperar(BufferedReader buffrd, String sLine, paquete mipaquete)
        {
            boolean isimage = false;
            try
            {
            if (mipaquete.can_start_packet(sLine))
            {
                mipaquete.set_id(sLine);
                sLine = buffrd.readLine();
                mipaquete.set_ip(sLine);
                while (!(sLine.contains("Content-Type:")))
                {
                    sLine = buffrd.readLine();    //salto lineas para buscar el tipo y la longitud del paquete
                    if (mipaquete.can_start_packet(sLine))
                    {
                        return false;
                    }
                }
                if (mipaquete.can_get_image_type(sLine))
                {
                    mipaquete.set_content_t(sLine);
                    sLine = buffrd.readLine();
                    mipaquete.set_Length_and_fragments(sLine);
                    while (!(sLine.contains("0x0000:")))
                    {
                        sLine = buffrd.readLine();    //salto lineas para buscar los bytes
                        if (mipaquete.can_start_packet(sLine))
                        {
                            return false;
                        }
                    }
                    while (mipaquete.can_start_packet(sLine) == false) //recorremos el paquete
                    {
                        if (mipaquete.can_get_image_byte(sLine) == true)
                        {
                            isimage = true;
                            mipaquete.set_init_bytes(sLine);
                            sLine = buffrd.readLine();
                        }
                        else
                        {
                            if (isimage == true)
                            {
                                mipaquete.set_bytes(sLine);
                                sLine = buffrd.readLine();
                            }
                            else
                            {
                                sLine = buffrd.readLine();
                            }
                        }
                    }
                   return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
            }
            catch (Exception ex) 
            {
             return false;   
            }
        }

                
        private boolean reconstruir(BufferedReader buffrd, String sLine, paquete mipaquete)
        {
            try
            {
            mipaquete.actual_id = mipaquete.id;
            int fragments = 1;
            while (sLine.contains(Integer.toString(mipaquete.actual_id)))
            {
                if (sLine != null && mipaquete.can_start_packet(sLine))
                {
                    if (sLine.contains(Integer.toString(mipaquete.actual_id)))
                    {
                        mipaquete.actual_id = mipaquete.actual_id + 1;
                        fragments = fragments + 1;
                        while (!(sLine.contains("0x0000:")))
                        {
                            sLine = buffrd.readLine();    //salto lineas para buscar los bytes
                        }
                        while (mipaquete.can_start_packet(sLine) == false && sLine != null) //recorremos el paquete
                        {
                            mipaquete.set_bytes(sLine);
                            sLine = buffrd.readLine();
                        }
                    }
                }
            }
            System.out.println("Los que hay: "+fragments + ". Los que son: "+ mipaquete.fragments);
            if (mipaquete.fragments == fragments)
            {
            FileOutputStream fos = new FileOutputStream("/home/stark28/ImÃ¡genes/reconstruido/"+mipaquete.id + ".jpg");
            try 
            {
                fos.write(mipaquete.HexStringToBytes(mipaquete.content_byte));
                return true;
                }
            catch(Exception e)
                    {
                        return false;
                    }
            
                finally {
                fos.close();
                }

            }
            else
            {
            FileOutputStream fos = new FileOutputStream("/home/stark28/ImÃ¡genes/reconstruido/"+mipaquete.id + ".jpg");
            try 
            {
                fos.write(mipaquete.HexStringToBytes(mipaquete.content_byte));
                return true;
                }
            catch(Exception e)
                    {
                        return false;
                    }
            
                finally {
                fos.close();
                }
            }
            }
            catch(Exception ex)
            {
                return false;
            }   
        }
}
